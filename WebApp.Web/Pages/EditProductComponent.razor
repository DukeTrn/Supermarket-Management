@page "/editproduct/{productId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager NavigationManager
@inject WebApp.UseCases.UseCaseInterfaces.IAddProductUseCase AddProductUseCase
@inject WebApp.UseCases.UseCaseInterfaces.IGetProductByIdUseCase GetProductByIdUseCase
@inject WebApp.UseCases.UseCaseInterfaces.IEditProductUseCase EditProductUseCase
@inject WebApp.UseCases.UseCaseInterfaces.IViewCategoriesUseCase ViewCategoriesUseCase

<h3>Cập nhật sản phẩm</h3>
<br />
@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Tên</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="category">Danh mục</label>
            <select id="category" @bind="product.CategoryId" class="form-control">
                <option selected></option>
                @foreach (var cat in categories)
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="price">Giá</label>
            <InputNumber id="price" @bind-Value="product.Price" @bind-Value:format="F2" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="qty">Số lượng</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Lưu</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Hủy</button>
    </EditForm>

}


@code {
    [Parameter]
    public string ProductId { get; set; }

    private Product product;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.ProductId, out int iProductId))
        {
            var prod = GetProductByIdUseCase.Execute(iProductId);
            this.product = new Product
                {
                    ProductId = prod.ProductId,
                    Name = prod.Name,
                    CategoryId = prod.CategoryId,
                    Price = prod.Price,
                    Quantity = prod.Quantity
                };
        }
    }

    private void OnValidSubmit()
    {
        EditProductUseCase.Execute(this.product);
        NavigationManager.NavigateTo("/products");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/products");
    }

}